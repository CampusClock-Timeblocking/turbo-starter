# Nixpacks build plan focused on deploying only the Fastify API service (apps/api)
# Coolify will detect this file automatically when Build Pack = "Nixpacks".
# It installs only the minimal workspaces needed (@repo/db, @repo/auth, @repo/contracts, api),
# builds them, generates the Prisma client, then starts the Fastify server.

[phases.setup]
# Pin Node & add pnpm (Coolify may already inject these; explicit for clarity)
nixPkgs = ["nodejs_20", "pnpm"]

[variables]
# Default port Fastify will listen on inside the container (override in Coolify UI)
PORT = "3001"
NODE_ENV = "production"

# --- INSTALL PHASE ---
[phases.install]
# Keep workspace install at repo root so packages resolve correctly
cmds = [
  "pnpm install --frozen-lockfile"
]

# --- BUILD PHASE ---
[phases.build]
# Build order matters: generate Prisma first, dann TS-Builds der Packages, dann API.
cmds = [
  # Ensure Prisma client is generated before TypeScript compile
  "pnpm -F @repo/db exec prisma generate",

  # Build DB (tsc) and Auth first (they publish dist consumed by api)
  "pnpm -F @repo/db exec pnpm run build:ts",

  # IMPORTANT: run inside the package; use local path (NOT packages/auth/...)
  "pnpm -F @repo/auth exec tsc -p tsconfig.json",

  # Finally build API
  "pnpm -F api run build:ts"
]

# --- START PHASE ---
[start]
# fastify-cli will load the compiled plugin at dist/app.js and start the server.
# PORT is injected by Coolify (or falls back to 3001 from [variables]).
workingDirectory = "apps/api"
cmd = "fastify start -l info dist/app.js"

# --- OPTIONAL: Run DB migrations automatically before start ---
# Uncomment if you want migrations during startup (idempotent in CI/CD)
# [start.pre]
# cmds = ["pnpm -F @repo/db exec prisma migrate deploy"]
